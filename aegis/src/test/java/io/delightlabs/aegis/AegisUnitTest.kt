package io.delightlabs.aegis

import io.delightlabs.aegis.common.Secret
import io.delightlabs.aegis.crypt.Algorithm
import io.delightlabs.aegis.crypt.NoCryptShare
import io.delightlabs.aegis.protocol.Protocol
import io.delightlabs.aegis.protocol.Version
import io.delightlabs.aegis.protocol.pack
import io.delightlabs.aegis.protocol.unpack
import org.junit.Assert
import org.junit.Test

class AegisUnitTest {

    @OptIn(ExperimentalUnsignedTypes::class)
    @Test
    fun `aegis dealshare & cobineshare`() {
        val key = byteArrayOf(1,2,3,4)
        val data = byteArrayOf(0)

        val aegis = Aegis.new(Version.V1, 3, 3)
        aegis.dealShares(Algorithm.NO_CRYPT, data, key)

        Assert.assertEquals(ubyteArrayOf(
            123.toUByte(),
            34.toUByte(),
            112.toUByte(),
            114.toUByte(),
            111.toUByte(),
            116.toUByte(),
            111.toUByte(),
            99.toUByte(),
            111.toUByte(),
            108.toUByte(),
            95.toUByte(),
            118.toUByte(),
            101.toUByte(),
            114.toUByte(),
            115.toUByte(),
            105.toUByte(),
            111.toUByte(),
            110.toUByte(),
            34.toUByte(),
            58.toUByte(),
            34.toUByte(),
            86.toUByte(),
            49.toUByte(),
            34.toUByte(),
            44.toUByte(),
            34.toUByte(),
            112.toUByte(),
            97.toUByte(),
            99.toUByte(),
            107.toUByte(),
            101.toUByte(),
            116.toUByte(),
            34.toUByte(),
            58.toUByte(),
            34.toUByte(),
            101.toUByte(),
            121.toUByte(),
            74.toUByte(),
            106.toUByte(),
            99.toUByte(),
            110.toUByte(),
            108.toUByte(),
            119.toUByte(),
            100.toUByte(),
            70.toUByte(),
            57.toUByte(),
            104.toUByte(),
            98.toUByte(),
            71.toUByte(),
            100.toUByte(),
            118.toUByte(),
            99.toUByte(),
            109.toUByte(),
            108.toUByte(),
            48.toUByte(),
            97.toUByte(),
            71.toUByte(),
            48.toUByte(),
            105.toUByte(),
            79.toUByte(),
            105.toUByte(),
            74.toUByte(),
            79.toUByte(),
            84.toUByte(),
            49.toUByte(),
            57.toUByte(),
            68.toUByte(),
            85.toUByte(),
            108.toUByte(),
            108.toUByte(),
            81.toUByte(),
            86.toUByte(),
            67.toUByte(),
            73.toUByte(),
            115.toUByte(),
            73.toUByte(),
            110.toUByte(),
            78.toUByte(),
            111.toUByte(),
            89.toUByte(),
            88.toUByte(),
            74.toUByte(),
            108.toUByte(),
            88.toUByte(),
            51.toUByte(),
            66.toUByte(),
            104.toUByte(),
            89.toUByte(),
            50.toUByte(),
            116.toUByte(),
            108.toUByte(),
            100.toUByte(),
            67.toUByte(),
            73.toUByte(),
            54.toUByte(),
            73.toUByte(),
            109.toUByte(),
            78.toUByte(),
            69.toUByte(),
            90.toUByte(),
            70.toUByte(),
            100.toUByte(),
            90.toUByte(),
            77.toUByte(),
            85.toUByte(),
            90.toUByte(),
            67.toUByte(),
            87.toUByte(),
            84.toUByte(),
            78.toUByte(),
            119.toUByte(),
            78.toUByte(),
            70.toUByte(),
            73.toUByte(),
            121.toUByte(),
            78.toUByte(),
            88.toUByte(),
            70.toUByte(),
            97.toUByte(),
            86.toUByte(),
            70.toUByte(),
            90.toUByte(),
            70.toUByte(),
            89.toUByte(),
            87.toUByte(),
            115.toUByte(),
            52.toUByte(),
            100.toUByte(),
            49.toUByte(),
            107.toUByte(),
            120.toUByte(),
            81.toUByte(),
            107.toUByte(),
            86.toUByte(),
            79.toUByte(),
            86.toUByte(),
            107.toUByte(),
            74.toUByte(),
            78.toUByte(),
            90.toUByte(),
            69.toUByte(),
            90.toUByte(),
            110.toUByte(),
            77.toUByte(),
            86.toUByte(),
            86.toUByte(),
            70.toUByte(),
            89.toUByte(),
            122.toUByte(),
            86.toUByte(),
            78.toUByte(),
            101.toUByte(),
            84.toUByte(),
            108.toUByte(),
            112.toUByte(),
            86.toUByte(),
            49.toUByte(),
            99.toUByte(),
            53.toUByte(),
            83.toUByte(),
            87.toUByte(),
            69.toUByte(),
            119.toUByte(),
            84.toUByte(),
            84.toUByte(),
            82.toUByte(),
            80.toUByte(),
            82.toUByte(),
            85.toUByte(),
            112.toUByte(),
            122.toUByte(),
            87.toUByte(),
            110.toUByte(),
            111.toUByte(),
            119.toUByte(),
            80.toUByte(),
            83.toUByte(),
            74.toUByte(),
            57.toUByte(),
            34.toUByte(),
            125.toUByte()).contentToString(), aegis.payloads.get(0).toUByteArray().contentToString())

        val aegis2 = Aegis.new(Version.V1, 3, 3)
        aegis2.payloads = aegis.payloads
        val combined = aegis2.combineShares(key)
        Assert.assertEquals(data.contentToString(), combined.contentToString())
    }

}